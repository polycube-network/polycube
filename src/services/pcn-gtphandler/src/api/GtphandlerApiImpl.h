/**
* gtphandler API generated from gtphandler.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* GtphandlerApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../Gtphandler.h"

#include "GtphandlerJsonObject.h"
#include "UserEquipmentJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace GtphandlerApiImpl {
  void create_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &value);
  void create_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value);
  void create_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value);
  void delete_gtphandler_by_id(const std::string &name);
  void delete_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip);
  void delete_gtphandler_user_equipment_list_by_id(const std::string &name);
  GtphandlerJsonObject read_gtphandler_by_id(const std::string &name);
  std::vector<GtphandlerJsonObject> read_gtphandler_list_by_id();
  UserEquipmentJsonObject read_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip);
  std::vector<UserEquipmentJsonObject> read_gtphandler_user_equipment_list_by_id(const std::string &name);
  std::string read_gtphandler_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip);
  void replace_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &value);
  void replace_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value);
  void replace_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value);
  void update_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &value);
  void update_gtphandler_list_by_id(const std::vector<GtphandlerJsonObject> &value);
  void update_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value);
  void update_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value);
  void update_gtphandler_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip, const std::string &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_gtphandler_list_by_id_get_list();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_gtphandler_user_equipment_list_by_id_get_list(const std::string &name);

}
}
}
}

