/**
* gtphandler API generated from gtphandler.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "GtphandlerApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace GtphandlerApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Gtphandler>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Gtphandler> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Gtphandler>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Gtphandler>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_gtphandler_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<GtphandlerJsonObject> read_gtphandler_list_by_id() {
  std::vector<GtphandlerJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_gtphandler_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Create user-equipment by ID
*
* Create operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
create_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto gtphandler = get_cube(name);

  return gtphandler->addUserEquipment(ip, value);
}

/**
* @brief   Create user-equipment by ID
*
* Create operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
create_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  auto gtphandler = get_cube(name);
  gtphandler->addUserEquipmentList(value);
}

/**
* @brief   Delete user-equipment by ID
*
* Delete operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
*
*/
void
delete_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip) {
  auto gtphandler = get_cube(name);

  return gtphandler->delUserEquipment(ip);
}

/**
* @brief   Delete user-equipment by ID
*
* Delete operation of resource: user-equipment*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_gtphandler_user_equipment_list_by_id(const std::string &name) {
  auto gtphandler = get_cube(name);
  gtphandler->delUserEquipmentList();
}

/**
* @brief   Read gtphandler by ID
*
* Read operation of resource: gtphandler*
*
* @param[in] name ID of name
*
* Responses:
* GtphandlerJsonObject
*/
GtphandlerJsonObject
read_gtphandler_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read user-equipment by ID
*
* Read operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* UserEquipmentJsonObject
*/
UserEquipmentJsonObject
read_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip) {
  auto gtphandler = get_cube(name);
  return gtphandler->getUserEquipment(ip)->toJsonObject();

}

/**
* @brief   Read user-equipment by ID
*
* Read operation of resource: user-equipment*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<UserEquipmentJsonObject>
*/
std::vector<UserEquipmentJsonObject>
read_gtphandler_user_equipment_list_by_id(const std::string &name) {
  auto gtphandler = get_cube(name);
  auto &&userEquipment = gtphandler->getUserEquipmentList();
  std::vector<UserEquipmentJsonObject> m;
  for(auto &i : userEquipment)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read tunnel-endpoint by ID
*
* Read operation of resource: tunnel-endpoint*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* std::string
*/
std::string
read_gtphandler_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip) {
  auto gtphandler = get_cube(name);
  auto userEquipment = gtphandler->getUserEquipment(ip);
  return userEquipment->getTunnelEndpoint();

}

/**
* @brief   Replace user-equipment by ID
*
* Replace operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
replace_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto gtphandler = get_cube(name);

  return gtphandler->replaceUserEquipment(ip, value);
}

/**
* @brief   Replace user-equipment by ID
*
* Replace operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
replace_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update gtphandler by ID
*
* Update operation of resource: gtphandler*
*
* @param[in] name ID of name
* @param[in] value gtphandlerbody object
*
* Responses:
*
*/
void
update_gtphandler_by_id(const std::string &name, const GtphandlerJsonObject &value) {
  auto gtphandler = get_cube(name);

  return gtphandler->update(value);
}

/**
* @brief   Update gtphandler by ID
*
* Update operation of resource: gtphandler*
*
* @param[in] value gtphandlerbody object
*
* Responses:
*
*/
void
update_gtphandler_list_by_id(const std::vector<GtphandlerJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update user-equipment by ID
*
* Update operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
update_gtphandler_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto gtphandler = get_cube(name);
  auto userEquipment = gtphandler->getUserEquipment(ip);

  return userEquipment->update(value);
}

/**
* @brief   Update user-equipment by ID
*
* Update operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
update_gtphandler_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update tunnel-endpoint by ID
*
* Update operation of resource: tunnel-endpoint*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value IP address of the Base Station that connects the User Equipment
*
* Responses:
*
*/
void
update_gtphandler_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip, const std::string &value) {
  auto gtphandler = get_cube(name);
  auto userEquipment = gtphandler->getUserEquipment(ip);

  return userEquipment->setTunnelEndpoint(value);
}



/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>> read_gtphandler_user_equipment_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&gtphandler = get_cube(name);

  auto &&userEquipment = gtphandler->getUserEquipmentList();
  for(auto &i : userEquipment) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["ip"] = i->getIp();

    r.push_back(keys);
  }
  return r;
}


}

}
}
}

