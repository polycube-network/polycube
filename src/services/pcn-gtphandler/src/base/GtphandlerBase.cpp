/**
* gtphandler API generated from gtphandler.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "GtphandlerBase.h"

GtphandlerBase::GtphandlerBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Gtphandler] [%n] [%l] %v");
}



GtphandlerBase::~GtphandlerBase() {}

void GtphandlerBase::update(const GtphandlerJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.userEquipmentIsSet()) {
    for (auto &i : conf.getUserEquipment()) {
      auto ip = i.getIp();
      auto m = getUserEquipment(ip);
      m->update(i);
    }
  }
}

GtphandlerJsonObject GtphandlerBase::toJsonObject() {
  GtphandlerJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for(auto &i : getUserEquipmentList()) {
    conf.addUserEquipment(i->toJsonObject());
  }

  return conf;
}
void GtphandlerBase::addUserEquipmentList(const std::vector<UserEquipmentJsonObject> &conf) {
  for (auto &i : conf) {
    std::string ip_ = i.getIp();
    addUserEquipment(ip_, i);
  }
}

void GtphandlerBase::replaceUserEquipment(const std::string &ip, const UserEquipmentJsonObject &conf) {
  delUserEquipment(ip);
  std::string ip_ = conf.getIp();
  addUserEquipment(ip_, conf);
}

void GtphandlerBase::delUserEquipmentList() {
  auto elements = getUserEquipmentList();
  for (auto &i : elements) {
    std::string ip_ = i->getIp();
    delUserEquipment(ip_);
  }
}


