/**
* monitor API generated from monitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "Monitor.h"
#include "Monitor_dp.h"

Monitor::Monitor(const std::string name, const MonitorJsonObject &conf)
  : TransparentCube(conf.getBase(), { monitor_code }, {}),
    MonitorBase(name) {
  logger()->debug("Creating Monitor instance");
}


Monitor::~Monitor() {
  logger()->debug("Destroying Monitor instance");
}

void Monitor::packet_in(polycube::service::Sense sense,
  polycube::service::PacketInMetadata &md,
  const std::vector<uint8_t> &packet) {
  logger()->debug("Packet received");
}

std::shared_ptr<Stats> Monitor::getStats() {
  StatsJsonObject sjo;
  return std::shared_ptr<Stats>(new Stats(*this, sjo));
}

void Monitor::addStats(const StatsJsonObject &value) {}

// Basic default implementation, place your extension here (if needed)
void Monitor::replaceStats(const StatsJsonObject &conf) {}

void Monitor::delStats() {}


