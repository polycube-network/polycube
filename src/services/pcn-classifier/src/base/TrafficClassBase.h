/**
* classifier API generated from classifier.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* TrafficClassBase.h
*
*
*/

#pragma once

#include "../serializer/TrafficClassJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Classifier;

class TrafficClassBase {
 public:
  
  TrafficClassBase(Classifier &parent);
  
  virtual ~TrafficClassBase();
  virtual void update(const TrafficClassJsonObject &conf);
  virtual TrafficClassJsonObject toJsonObject();

  /// <summary>
  /// Id of the class, set in metadata of matching packets
  /// </summary>
  virtual uint32_t getId() = 0;

  /// <summary>
  /// Packets matching multiple classes are assigned to the one with highest priority
  /// </summary>
  virtual uint32_t getPriority() = 0;
  virtual void setPriority(const uint32_t &value) = 0;

  /// <summary>
  /// Direction (INGRESS, EGRESS or BOTH) of the packet (default: BOTH)
  /// </summary>
  virtual TrafficClassDirectionEnum getDirection() = 0;
  virtual void setDirection(const TrafficClassDirectionEnum &value) = 0;

  /// <summary>
  /// Source MAC address of the packet
  /// </summary>
  virtual std::string getSmac() = 0;
  virtual void setSmac(const std::string &value) = 0;

  /// <summary>
  /// Destination MAC address of the packet
  /// </summary>
  virtual std::string getDmac() = 0;
  virtual void setDmac(const std::string &value) = 0;

  /// <summary>
  /// Ethertype of the packet (ARP | IP)
  /// </summary>
  virtual TrafficClassEthtypeEnum getEthtype() = 0;
  virtual void setEthtype(const TrafficClassEthtypeEnum &value) = 0;

  /// <summary>
  /// Source IP address prefix of the packet
  /// </summary>
  virtual std::string getSrcip() = 0;
  virtual void setSrcip(const std::string &value) = 0;

  /// <summary>
  /// Destination IP address prefix of the packet
  /// </summary>
  virtual std::string getDstip() = 0;
  virtual void setDstip(const std::string &value) = 0;

  /// <summary>
  /// Level 4 protocol of the packet (ICMP | TCP | UDP)
  /// </summary>
  virtual TrafficClassL4protoEnum getL4proto() = 0;
  virtual void setL4proto(const TrafficClassL4protoEnum &value) = 0;

  /// <summary>
  /// Source port of the packet
  /// </summary>
  virtual uint16_t getSport() = 0;
  virtual void setSport(const uint16_t &value) = 0;

  /// <summary>
  /// Destination port of the packet
  /// </summary>
  virtual uint16_t getDport() = 0;
  virtual void setDport(const uint16_t &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Classifier &parent_;
};
