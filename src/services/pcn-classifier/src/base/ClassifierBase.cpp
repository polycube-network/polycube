/**
* classifier API generated from classifier.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "ClassifierBase.h"

ClassifierBase::ClassifierBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Classifier] [%n] [%l] %v");
}



ClassifierBase::~ClassifierBase() {}

void ClassifierBase::update(const ClassifierJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.trafficClassIsSet()) {
    for (auto &i : conf.getTrafficClass()) {
      auto id = i.getId();
      auto m = getTrafficClass(id);
      m->update(i);
    }
  }
}

ClassifierJsonObject ClassifierBase::toJsonObject() {
  ClassifierJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for(auto &i : getTrafficClassList()) {
    conf.addTrafficClass(i->toJsonObject());
  }

  return conf;
}
void ClassifierBase::addTrafficClassList(const std::vector<TrafficClassJsonObject> &conf) {
  for (auto &i : conf) {
    uint32_t id_ = i.getId();
    addTrafficClass(id_, i);
  }
}

void ClassifierBase::replaceTrafficClass(const uint32_t &id, const TrafficClassJsonObject &conf) {
  delTrafficClass(id);
  uint32_t id_ = conf.getId();
  addTrafficClass(id_, conf);
}

void ClassifierBase::delTrafficClassList() {
  auto elements = getTrafficClassList();
  for (auto &i : elements) {
    uint32_t id_ = i->getId();
    delTrafficClass(id_);
  }
}


