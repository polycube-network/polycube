/**
* classifier API generated from classifier.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "ClassifierApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace ClassifierApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Classifier>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Classifier> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_classifier_by_id(const std::string &name, const ClassifierJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Classifier>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Classifier>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_classifier_by_id(const std::string &name, const ClassifierJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_classifier_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<ClassifierJsonObject> read_classifier_list_by_id() {
  std::vector<ClassifierJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_classifier_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Create traffic-class by ID
*
* Create operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
create_classifier_traffic_class_by_id(const std::string &name, const uint32_t &id, const TrafficClassJsonObject &value) {
  auto classifier = get_cube(name);

  return classifier->addTrafficClass(id, value);
}

/**
* @brief   Create traffic-class by ID
*
* Create operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
create_classifier_traffic_class_list_by_id(const std::string &name, const std::vector<TrafficClassJsonObject> &value) {
  auto classifier = get_cube(name);
  classifier->addTrafficClassList(value);
}

/**
* @brief   Delete traffic-class by ID
*
* Delete operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
*
*/
void
delete_classifier_traffic_class_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);

  return classifier->delTrafficClass(id);
}

/**
* @brief   Delete traffic-class by ID
*
* Delete operation of resource: traffic-class*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_classifier_traffic_class_list_by_id(const std::string &name) {
  auto classifier = get_cube(name);
  classifier->delTrafficClassList();
}

/**
* @brief   Read classifier by ID
*
* Read operation of resource: classifier*
*
* @param[in] name ID of name
*
* Responses:
* ClassifierJsonObject
*/
ClassifierJsonObject
read_classifier_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read traffic-class by ID
*
* Read operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* TrafficClassJsonObject
*/
TrafficClassJsonObject
read_classifier_traffic_class_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  return classifier->getTrafficClass(id)->toJsonObject();

}

/**
* @brief   Read direction by ID
*
* Read operation of resource: direction*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* TrafficClassDirectionEnum
*/
TrafficClassDirectionEnum
read_classifier_traffic_class_direction_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getDirection();

}

/**
* @brief   Read dmac by ID
*
* Read operation of resource: dmac*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* std::string
*/
std::string
read_classifier_traffic_class_dmac_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getDmac();

}

/**
* @brief   Read dport by ID
*
* Read operation of resource: dport*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* uint16_t
*/
uint16_t
read_classifier_traffic_class_dport_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getDport();

}

/**
* @brief   Read dstip by ID
*
* Read operation of resource: dstip*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* std::string
*/
std::string
read_classifier_traffic_class_dstip_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getDstip();

}

/**
* @brief   Read ethtype by ID
*
* Read operation of resource: ethtype*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* TrafficClassEthtypeEnum
*/
TrafficClassEthtypeEnum
read_classifier_traffic_class_ethtype_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getEthtype();

}

/**
* @brief   Read l4proto by ID
*
* Read operation of resource: l4proto*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* TrafficClassL4protoEnum
*/
TrafficClassL4protoEnum
read_classifier_traffic_class_l4proto_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getL4proto();

}

/**
* @brief   Read traffic-class by ID
*
* Read operation of resource: traffic-class*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<TrafficClassJsonObject>
*/
std::vector<TrafficClassJsonObject>
read_classifier_traffic_class_list_by_id(const std::string &name) {
  auto classifier = get_cube(name);
  auto &&trafficClass = classifier->getTrafficClassList();
  std::vector<TrafficClassJsonObject> m;
  for(auto &i : trafficClass)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read priority by ID
*
* Read operation of resource: priority*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* uint32_t
*/
uint32_t
read_classifier_traffic_class_priority_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getPriority();

}

/**
* @brief   Read smac by ID
*
* Read operation of resource: smac*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* std::string
*/
std::string
read_classifier_traffic_class_smac_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getSmac();

}

/**
* @brief   Read sport by ID
*
* Read operation of resource: sport*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* uint16_t
*/
uint16_t
read_classifier_traffic_class_sport_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getSport();

}

/**
* @brief   Read srcip by ID
*
* Read operation of resource: srcip*
*
* @param[in] name ID of name
* @param[in] id ID of id
*
* Responses:
* std::string
*/
std::string
read_classifier_traffic_class_srcip_by_id(const std::string &name, const uint32_t &id) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);
  return trafficClass->getSrcip();

}

/**
* @brief   Replace traffic-class by ID
*
* Replace operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
replace_classifier_traffic_class_by_id(const std::string &name, const uint32_t &id, const TrafficClassJsonObject &value) {
  auto classifier = get_cube(name);

  return classifier->replaceTrafficClass(id, value);
}

/**
* @brief   Replace traffic-class by ID
*
* Replace operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
replace_classifier_traffic_class_list_by_id(const std::string &name, const std::vector<TrafficClassJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update classifier by ID
*
* Update operation of resource: classifier*
*
* @param[in] name ID of name
* @param[in] value classifierbody object
*
* Responses:
*
*/
void
update_classifier_by_id(const std::string &name, const ClassifierJsonObject &value) {
  auto classifier = get_cube(name);

  return classifier->update(value);
}

/**
* @brief   Update classifier by ID
*
* Update operation of resource: classifier*
*
* @param[in] value classifierbody object
*
* Responses:
*
*/
void
update_classifier_list_by_id(const std::vector<ClassifierJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update traffic-class by ID
*
* Update operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
update_classifier_traffic_class_by_id(const std::string &name, const uint32_t &id, const TrafficClassJsonObject &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->update(value);
}

/**
* @brief   Update direction by ID
*
* Update operation of resource: direction*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Direction (INGRESS, EGRESS or BOTH) of the packet (default: BOTH)
*
* Responses:
*
*/
void
update_classifier_traffic_class_direction_by_id(const std::string &name, const uint32_t &id, const TrafficClassDirectionEnum &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setDirection(value);
}

/**
* @brief   Update dmac by ID
*
* Update operation of resource: dmac*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Destination MAC address of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_dmac_by_id(const std::string &name, const uint32_t &id, const std::string &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setDmac(value);
}

/**
* @brief   Update dport by ID
*
* Update operation of resource: dport*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Destination port of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_dport_by_id(const std::string &name, const uint32_t &id, const uint16_t &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setDport(value);
}

/**
* @brief   Update dstip by ID
*
* Update operation of resource: dstip*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Destination IP address prefix of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_dstip_by_id(const std::string &name, const uint32_t &id, const std::string &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setDstip(value);
}

/**
* @brief   Update ethtype by ID
*
* Update operation of resource: ethtype*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Ethertype of the packet (ARP | IP)
*
* Responses:
*
*/
void
update_classifier_traffic_class_ethtype_by_id(const std::string &name, const uint32_t &id, const TrafficClassEthtypeEnum &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setEthtype(value);
}

/**
* @brief   Update l4proto by ID
*
* Update operation of resource: l4proto*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Level 4 protocol of the packet (ICMP | TCP | UDP)
*
* Responses:
*
*/
void
update_classifier_traffic_class_l4proto_by_id(const std::string &name, const uint32_t &id, const TrafficClassL4protoEnum &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setL4proto(value);
}

/**
* @brief   Update traffic-class by ID
*
* Update operation of resource: traffic-class*
*
* @param[in] name ID of name
* @param[in] value traffic-classbody object
*
* Responses:
*
*/
void
update_classifier_traffic_class_list_by_id(const std::string &name, const std::vector<TrafficClassJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update priority by ID
*
* Update operation of resource: priority*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Packets matching multiple classes are assigned to the one with highest priority
*
* Responses:
*
*/
void
update_classifier_traffic_class_priority_by_id(const std::string &name, const uint32_t &id, const uint32_t &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setPriority(value);
}

/**
* @brief   Update smac by ID
*
* Update operation of resource: smac*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Source MAC address of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_smac_by_id(const std::string &name, const uint32_t &id, const std::string &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setSmac(value);
}

/**
* @brief   Update sport by ID
*
* Update operation of resource: sport*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Source port of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_sport_by_id(const std::string &name, const uint32_t &id, const uint16_t &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setSport(value);
}

/**
* @brief   Update srcip by ID
*
* Update operation of resource: srcip*
*
* @param[in] name ID of name
* @param[in] id ID of id
* @param[in] value Source IP address prefix of the packet
*
* Responses:
*
*/
void
update_classifier_traffic_class_srcip_by_id(const std::string &name, const uint32_t &id, const std::string &value) {
  auto classifier = get_cube(name);
  auto trafficClass = classifier->getTrafficClass(id);

  return trafficClass->setSrcip(value);
}



/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>> read_classifier_traffic_class_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&classifier = get_cube(name);

  auto &&trafficClass = classifier->getTrafficClassList();
  for(auto &i : trafficClass) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["id"] = std::to_string(i->getId());

    r.push_back(keys);
  }
  return r;
}


}

}
}
}

