/**
* synflood API generated from synflood.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "Stats.h"
#include "Synflood.h"


Stats::Stats(Synflood &parent, const StatsJsonObject &conf)
    : StatsBase(parent) {
}

Stats::~Stats() {}

const uint64_t ratioMultiplier = 1000;

uint64_t Stats::getTcpattemptfails() {
  try {
    return std::stoull(Synflood::exec("nstat -a | grep TcpAttemptFails | awk '{print $2}'"));
  } catch (...) {
    return 0;
  }
}

uint64_t Stats::getTcpoutrsts() {
  try {
    return std::stoull(Synflood::exec("nstat -a | grep TcpOutRsts | awk '{print $2}'"));
  } catch (...) {
    return 0;
  }
}

uint64_t Stats::getDeliverratio() {
  try {
    std::istringstream ipInDeliversStream(Synflood::exec("nstat -a | grep IpInDelivers | awk '{print $2}'"));
    std::istringstream ipInReceivesStream(Synflood::exec("nstat -a | grep IpInReceives | awk '{print $2}'"));

    uint64_t ipInDelivers;
    uint64_t ipInReceives;

    ipInDeliversStream >> ipInDelivers;
    ipInReceivesStream >> ipInReceives;

    float ratio = ((float) ipInDelivers / ((float) ipInReceives + 1.0)) * ratioMultiplier;
    return (uint64_t) (ratio);
  } catch (...) {
    return 0;
  }
}

uint64_t Stats::getResponseratio() {
  try {
    std::istringstream ipOutRequestsStream(Synflood::exec("nstat -a | grep IpOutRequests | awk '{print $2}'"));
    std::istringstream ipInReceivesStream(Synflood::exec("nstat -a | grep IpInReceives | awk '{print $2}'"));

    uint64_t ipOutRequests;
    uint64_t ipInReceives;

    ipOutRequestsStream >> ipOutRequests;
    ipInReceivesStream >> ipInReceives;

    float ratio = ((float)ipOutRequests / ((float)ipInReceives + 1.0)) * ratioMultiplier;
    return (uint64_t)(ratio);
  } catch (...) {
    return 0;
  }
}

uint64_t Stats::getLastupdate() {
  return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
