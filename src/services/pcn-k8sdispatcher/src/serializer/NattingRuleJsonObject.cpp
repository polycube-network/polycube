/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "NattingRuleJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

NattingRuleJsonObject::NattingRuleJsonObject() {
  m_internalSrcIsSet = false;
  m_internalDstIsSet = false;
  m_internalSportIsSet = false;
  m_internalDportIsSet = false;
  m_protoIsSet = false;
  m_externalIpIsSet = false;
  m_externalPortIsSet = false;
}

NattingRuleJsonObject::NattingRuleJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_internalSrcIsSet = false;
  m_internalDstIsSet = false;
  m_internalSportIsSet = false;
  m_internalDportIsSet = false;
  m_protoIsSet = false;
  m_externalIpIsSet = false;
  m_externalPortIsSet = false;


  if (val.count("internal-src")) {
    setInternalSrc(val.at("internal-src").get<std::string>());
  }

  if (val.count("internal-dst")) {
    setInternalDst(val.at("internal-dst").get<std::string>());
  }

  if (val.count("internal-sport")) {
    setInternalSport(val.at("internal-sport").get<uint16_t>());
  }

  if (val.count("internal-dport")) {
    setInternalDport(val.at("internal-dport").get<uint16_t>());
  }

  if (val.count("proto")) {
    setProto(val.at("proto").get<std::string>());
  }

  if (val.count("external-ip")) {
    setExternalIp(val.at("external-ip").get<std::string>());
  }

  if (val.count("external-port")) {
    setExternalPort(val.at("external-port").get<uint16_t>());
  }
}

nlohmann::json NattingRuleJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_internalSrcIsSet) {
    val["internal-src"] = m_internalSrc;
  }

  if (m_internalDstIsSet) {
    val["internal-dst"] = m_internalDst;
  }

  if (m_internalSportIsSet) {
    val["internal-sport"] = m_internalSport;
  }

  if (m_internalDportIsSet) {
    val["internal-dport"] = m_internalDport;
  }

  if (m_protoIsSet) {
    val["proto"] = m_proto;
  }

  if (m_externalIpIsSet) {
    val["external-ip"] = m_externalIp;
  }

  if (m_externalPortIsSet) {
    val["external-port"] = m_externalPort;
  }

  return val;
}

std::string NattingRuleJsonObject::getInternalSrc() const {
  return m_internalSrc;
}

void NattingRuleJsonObject::setInternalSrc(std::string value) {
  m_internalSrc = value;
  m_internalSrcIsSet = true;
}

bool NattingRuleJsonObject::internalSrcIsSet() const {
  return m_internalSrcIsSet;
}



std::string NattingRuleJsonObject::getInternalDst() const {
  return m_internalDst;
}

void NattingRuleJsonObject::setInternalDst(std::string value) {
  m_internalDst = value;
  m_internalDstIsSet = true;
}

bool NattingRuleJsonObject::internalDstIsSet() const {
  return m_internalDstIsSet;
}



uint16_t NattingRuleJsonObject::getInternalSport() const {
  return m_internalSport;
}

void NattingRuleJsonObject::setInternalSport(uint16_t value) {
  m_internalSport = value;
  m_internalSportIsSet = true;
}

bool NattingRuleJsonObject::internalSportIsSet() const {
  return m_internalSportIsSet;
}



uint16_t NattingRuleJsonObject::getInternalDport() const {
  return m_internalDport;
}

void NattingRuleJsonObject::setInternalDport(uint16_t value) {
  m_internalDport = value;
  m_internalDportIsSet = true;
}

bool NattingRuleJsonObject::internalDportIsSet() const {
  return m_internalDportIsSet;
}



std::string NattingRuleJsonObject::getProto() const {
  return m_proto;
}

void NattingRuleJsonObject::setProto(std::string value) {
  m_proto = value;
  m_protoIsSet = true;
}

bool NattingRuleJsonObject::protoIsSet() const {
  return m_protoIsSet;
}



std::string NattingRuleJsonObject::getExternalIp() const {
  return m_externalIp;
}

void NattingRuleJsonObject::setExternalIp(std::string value) {
  m_externalIp = value;
  m_externalIpIsSet = true;
}

bool NattingRuleJsonObject::externalIpIsSet() const {
  return m_externalIpIsSet;
}

void NattingRuleJsonObject::unsetExternalIp() {
  m_externalIpIsSet = false;
}

uint16_t NattingRuleJsonObject::getExternalPort() const {
  return m_externalPort;
}

void NattingRuleJsonObject::setExternalPort(uint16_t value) {
  m_externalPort = value;
  m_externalPortIsSet = true;
}

bool NattingRuleJsonObject::externalPortIsSet() const {
  return m_externalPortIsSet;
}

void NattingRuleJsonObject::unsetExternalPort() {
  m_externalPortIsSet = false;
}


}
}
}

