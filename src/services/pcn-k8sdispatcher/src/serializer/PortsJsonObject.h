/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PortsJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include <vector>

namespace polycube {
namespace service {
namespace model {

enum class PortsTypeEnum {
  BACKEND, FRONTEND
};

/// <summary>
///
/// </summary>
class  PortsJsonObject : public JsonObjectBase {
public:
  PortsJsonObject();
  PortsJsonObject(const nlohmann::json &json);
  ~PortsJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Port Name
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Type of the k8sdispatcher port (e.g. BACKEND or FRONTEND)
  /// </summary>
  PortsTypeEnum getType() const;
  void setType(PortsTypeEnum value);
  bool typeIsSet() const;
  static std::string PortsTypeEnum_to_string(const PortsTypeEnum &value);
  static PortsTypeEnum string_to_PortsTypeEnum(const std::string &str);

  /// <summary>
  /// IP address of the node interface (only for FRONTEND port)
  /// </summary>
  std::string getIp() const;
  void setIp(std::string value);
  bool ipIsSet() const;
  void unsetIp();

private:
  std::string m_name;
  bool m_nameIsSet;
  PortsTypeEnum m_type;
  bool m_typeIsSet;
  std::string m_ip;
  bool m_ipIsSet;
};

}
}
}

