/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "NodeportRuleJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

NodeportRuleJsonObject::NodeportRuleJsonObject() {
  m_nodeportNameIsSet = false;
  m_nodeportPortIsSet = false;
  m_protoIsSet = false;
  m_serviceTypeIsSet = false;
}

NodeportRuleJsonObject::NodeportRuleJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nodeportNameIsSet = false;
  m_nodeportPortIsSet = false;
  m_protoIsSet = false;
  m_serviceTypeIsSet = false;


  if (val.count("nodeport-name")) {
    setNodeportName(val.at("nodeport-name").get<std::string>());
  }

  if (val.count("nodeport-port")) {
    setNodeportPort(val.at("nodeport-port").get<uint16_t>());
  }

  if (val.count("proto")) {
    setProto(val.at("proto").get<std::string>());
  }

  if (val.count("service-type")) {
    setServiceType(string_to_NodeportRuleServiceTypeEnum(val.at("service-type").get<std::string>()));
  }
}

nlohmann::json NodeportRuleJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nodeportNameIsSet) {
    val["nodeport-name"] = m_nodeportName;
  }

  if (m_nodeportPortIsSet) {
    val["nodeport-port"] = m_nodeportPort;
  }

  if (m_protoIsSet) {
    val["proto"] = m_proto;
  }

  if (m_serviceTypeIsSet) {
    val["service-type"] = NodeportRuleServiceTypeEnum_to_string(m_serviceType);
  }

  return val;
}

std::string NodeportRuleJsonObject::getNodeportName() const {
  return m_nodeportName;
}

void NodeportRuleJsonObject::setNodeportName(std::string value) {
  m_nodeportName = value;
  m_nodeportNameIsSet = true;
}

bool NodeportRuleJsonObject::nodeportNameIsSet() const {
  return m_nodeportNameIsSet;
}

void NodeportRuleJsonObject::unsetNodeportName() {
  m_nodeportNameIsSet = false;
}

uint16_t NodeportRuleJsonObject::getNodeportPort() const {
  return m_nodeportPort;
}

void NodeportRuleJsonObject::setNodeportPort(uint16_t value) {
  m_nodeportPort = value;
  m_nodeportPortIsSet = true;
}

bool NodeportRuleJsonObject::nodeportPortIsSet() const {
  return m_nodeportPortIsSet;
}



std::string NodeportRuleJsonObject::getProto() const {
  return m_proto;
}

void NodeportRuleJsonObject::setProto(std::string value) {
  m_proto = value;
  m_protoIsSet = true;
}

bool NodeportRuleJsonObject::protoIsSet() const {
  return m_protoIsSet;
}



NodeportRuleServiceTypeEnum NodeportRuleJsonObject::getServiceType() const {
  return m_serviceType;
}

void NodeportRuleJsonObject::setServiceType(NodeportRuleServiceTypeEnum value) {
  m_serviceType = value;
  m_serviceTypeIsSet = true;
}

bool NodeportRuleJsonObject::serviceTypeIsSet() const {
  return m_serviceTypeIsSet;
}



std::string NodeportRuleJsonObject::NodeportRuleServiceTypeEnum_to_string(const NodeportRuleServiceTypeEnum &value){
  switch(value) {
    case NodeportRuleServiceTypeEnum::CLUSTER:
      return std::string("cluster");
    case NodeportRuleServiceTypeEnum::LOCAL:
      return std::string("local");
    default:
      throw std::runtime_error("Bad NodeportRule serviceType");
  }
}

NodeportRuleServiceTypeEnum NodeportRuleJsonObject::string_to_NodeportRuleServiceTypeEnum(const std::string &str){
  if (JsonObjectBase::iequals("cluster", str))
    return NodeportRuleServiceTypeEnum::CLUSTER;
  if (JsonObjectBase::iequals("local", str))
    return NodeportRuleServiceTypeEnum::LOCAL;
  throw std::runtime_error("NodeportRule serviceType is invalid");
}

}
}
}

