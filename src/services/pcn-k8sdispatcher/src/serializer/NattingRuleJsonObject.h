/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* NattingRuleJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  NattingRuleJsonObject : public JsonObjectBase {
public:
  NattingRuleJsonObject();
  NattingRuleJsonObject(const nlohmann::json &json);
  ~NattingRuleJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Source IP address
  /// </summary>
  std::string getInternalSrc() const;
  void setInternalSrc(std::string value);
  bool internalSrcIsSet() const;

  /// <summary>
  /// Destination IP address
  /// </summary>
  std::string getInternalDst() const;
  void setInternalDst(std::string value);
  bool internalDstIsSet() const;

  /// <summary>
  /// Source L4 port number
  /// </summary>
  uint16_t getInternalSport() const;
  void setInternalSport(uint16_t value);
  bool internalSportIsSet() const;

  /// <summary>
  /// Destination L4 port number
  /// </summary>
  uint16_t getInternalDport() const;
  void setInternalDport(uint16_t value);
  bool internalDportIsSet() const;

  /// <summary>
  /// L4 protocol
  /// </summary>
  std::string getProto() const;
  void setProto(std::string value);
  bool protoIsSet() const;

  /// <summary>
  /// Translated IP address
  /// </summary>
  std::string getExternalIp() const;
  void setExternalIp(std::string value);
  bool externalIpIsSet() const;
  void unsetExternalIp();

  /// <summary>
  /// Translated L4 port number
  /// </summary>
  uint16_t getExternalPort() const;
  void setExternalPort(uint16_t value);
  bool externalPortIsSet() const;
  void unsetExternalPort();

private:
  std::string m_internalSrc;
  bool m_internalSrcIsSet;
  std::string m_internalDst;
  bool m_internalDstIsSet;
  uint16_t m_internalSport;
  bool m_internalSportIsSet;
  uint16_t m_internalDport;
  bool m_internalDportIsSet;
  std::string m_proto;
  bool m_protoIsSet;
  std::string m_externalIp;
  bool m_externalIpIsSet;
  uint16_t m_externalPort;
  bool m_externalPortIsSet;
};

}
}
}

