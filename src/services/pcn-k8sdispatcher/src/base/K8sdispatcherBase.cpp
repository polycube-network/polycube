/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "K8sdispatcherBase.h"

K8sdispatcherBase::K8sdispatcherBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [K8sdispatcher] [%n] [%l] %v");
}



K8sdispatcherBase::~K8sdispatcherBase() {}

void K8sdispatcherBase::update(const K8sdispatcherJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
      m->update(i);
    }
  }
  if (conf.internalSrcIpIsSet()) {
    setInternalSrcIp(conf.getInternalSrcIp());
  }
  if (conf.nattingRuleIsSet()) {
    for (auto &i : conf.getNattingRule()) {
      auto internalSrc = i.getInternalSrc();
      auto internalDst = i.getInternalDst();
      auto internalSport = i.getInternalSport();
      auto internalDport = i.getInternalDport();
      auto proto = i.getProto();
      auto m = getNattingRule(internalSrc, internalDst, internalSport, internalDport, proto);
      m->update(i);
    }
  }
  if (conf.nodeportRuleIsSet()) {
    for (auto &i : conf.getNodeportRule()) {
      auto nodeportPort = i.getNodeportPort();
      auto proto = i.getProto();
      auto m = getNodeportRule(nodeportPort, proto);
      m->update(i);
    }
  }
  if (conf.nodeportRangeIsSet()) {
    setNodeportRange(conf.getNodeportRange());
  }
}

K8sdispatcherJsonObject K8sdispatcherBase::toJsonObject() {
    K8sdispatcherJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }
  conf.setInternalSrcIp(getInternalSrcIp());
  for(auto &i : getNattingRuleList()) {
    conf.addNattingRule(i->toJsonObject());
  }
  for(auto &i : getNodeportRuleList()) {
    conf.addNodeportRule(i->toJsonObject());
  }
  conf.setNodeportRange(getNodeportRange());

  return conf;
}
void K8sdispatcherBase::addPortsList(const std::vector<PortsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addPorts(name_, i);
  }
}

void K8sdispatcherBase::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  delPorts(name);
  std::string name_ = conf.getName();
  addPorts(name_, conf);
}

void K8sdispatcherBase::delPortsList() {
  auto elements = getPortsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delPorts(name_);
  }
}

void K8sdispatcherBase::addPorts(const std::string &name, const PortsJsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void K8sdispatcherBase::delPorts(const std::string &name) {
  remove_port(name);
}

std::shared_ptr<Ports> K8sdispatcherBase::getPorts(const std::string &name) {
  return get_port(name);
}

std::vector<std::shared_ptr<Ports>> K8sdispatcherBase::getPortsList() {
  return get_ports();
}
void K8sdispatcherBase::addNattingRuleList(const std::vector<NattingRuleJsonObject> &conf) {
  for (auto &i : conf) {
    std::string internalSrc_ = i.getInternalSrc();
    std::string internalDst_ = i.getInternalDst();
    uint16_t internalSport_ = i.getInternalSport();
    uint16_t internalDport_ = i.getInternalDport();
    std::string proto_ = i.getProto();
    addNattingRule(internalSrc_, internalDst_, internalSport_, internalDport_, proto_, i);
  }
}

void K8sdispatcherBase::replaceNattingRule(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingRuleJsonObject &conf) {
  delNattingRule(internalSrc, internalDst, internalSport, internalDport, proto);
  std::string internalSrc_ = conf.getInternalSrc();
  std::string internalDst_ = conf.getInternalDst();
  uint16_t internalSport_ = conf.getInternalSport();
  uint16_t internalDport_ = conf.getInternalDport();
  std::string proto_ = conf.getProto();
  addNattingRule(internalSrc_, internalDst_, internalSport_, internalDport_, proto_, conf);
}

void K8sdispatcherBase::delNattingRuleList() {
  auto elements = getNattingRuleList();
  for (auto &i : elements) {
    std::string internalSrc_ = i->getInternalSrc();
    std::string internalDst_ = i->getInternalDst();
    uint16_t internalSport_ = i->getInternalSport();
    uint16_t internalDport_ = i->getInternalDport();
    std::string proto_ = i->getProto();
    delNattingRule(internalSrc_, internalDst_, internalSport_, internalDport_, proto_);
  }
}
void K8sdispatcherBase::addNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf) {
  for (auto &i : conf) {
    uint16_t nodeportPort_ = i.getNodeportPort();
    std::string proto_ = i.getProto();
    addNodeportRule(nodeportPort_, proto_, i);
  }
}

void K8sdispatcherBase::replaceNodeportRule(const uint16_t &nodeportPort, const std::string &proto, const NodeportRuleJsonObject &conf) {
  delNodeportRule(nodeportPort, proto);
  uint16_t nodeportPort_ = conf.getNodeportPort();
  std::string proto_ = conf.getProto();
  addNodeportRule(nodeportPort_, proto_, conf);
}

void K8sdispatcherBase::delNodeportRuleList() {
  auto elements = getNodeportRuleList();
  for (auto &i : elements) {
    uint16_t nodeportPort_ = i->getNodeportPort();
    std::string proto_ = i->getProto();
    delNodeportRule(nodeportPort_, proto_);
  }
}


