/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* NodeportRuleBase.h
*
*
*/

#pragma once

#include "../serializer/NodeportRuleJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class K8sdispatcher;

class NodeportRuleBase {
 public:
  
  NodeportRuleBase(K8sdispatcher &parent);
  
  virtual ~NodeportRuleBase();
  virtual void update(const NodeportRuleJsonObject &conf);
  virtual NodeportRuleJsonObject toJsonObject();

  /// <summary>
  /// An optional name for the NodePort rule
  /// </summary>
  virtual std::string getNodeportName() = 0;
  virtual void setNodeportName(const std::string &value) = 0;

  /// <summary>
  /// Destination L4 port number
  /// </summary>
  virtual uint16_t getNodeportPort() = 0;

  /// <summary>
  /// L4 protocol
  /// </summary>
  virtual std::string getProto() = 0;

  /// <summary>
  /// Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoint
  /// </summary>
  virtual NodeportRuleServiceTypeEnum getServiceType() = 0;
  virtual void setServiceType(const NodeportRuleServiceTypeEnum &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  K8sdispatcher &parent_;
};
