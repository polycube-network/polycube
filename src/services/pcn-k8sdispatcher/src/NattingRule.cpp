/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#include "NattingRule.h"
#include "K8sdispatcher.h"


NattingRule::NattingRule(K8sdispatcher &parent, const NattingRuleJsonObject &conf)
    : NattingRuleBase(parent) {
    logger()->info("creating NattingRule instance");
    this->srcIp_ = conf.internalSrcIsSet() ? conf.getInternalSrc() : "";
    this->dstIp_ = conf.internalDstIsSet() ? conf.getInternalDst() : "";
    this->srcPort_ = conf.internalSportIsSet() ? conf.getInternalSport() : 0;
    this->dstPort_ = conf.internalDportIsSet() ? conf.getInternalDport() : 0;
    this->proto_ = conf.getProto();
    this->newIp_ = conf.externalIpIsSet() ? conf.getExternalIp() : "";
    this->newPort_ = conf.externalPortIsSet() ? conf.getExternalPort() : 0;
    logger()->info("created NattingRule instance");
}

NattingRule::NattingRule(K8sdispatcher &parent, const std::string srcIp,
                         const std::string dstIp, const uint16_t srcPort,
                         const uint16_t dstPort, const uint8_t proto,
                         const std::string newIp, const uint16_t newPort
)
        : NattingRuleBase(parent) {
    this->srcIp_ = srcIp;
    this->dstIp_ = dstIp;
    this->srcPort_ = srcPort;
    this->dstPort_ = dstPort;
    this->proto_ = K8sdispatcher::protoIntToStr(proto);
    this->newIp_ = newIp;
    this->newPort_ = newPort;
}

void NattingRule::update(const NattingRuleJsonObject &conf) {
    // This method updates all the object/parameter in NattingTable object
    // specified in the conf JsonObject.
    // You can modify this implementation.

    if (conf.externalIpIsSet()) {
        setExternalIp(conf.getExternalIp());
    }
    if (conf.externalPortIsSet()) {
        setExternalPort(conf.getExternalPort());
    }
}

NattingRuleJsonObject NattingRule::toJsonObject() {
    NattingRuleJsonObject conf;
    try {
        conf.setInternalSrc(getInternalSrc());
        conf.setInternalDst(getInternalDst());
        conf.setInternalSport(getInternalSport());
        conf.setInternalDport(getInternalDport());
        conf.setProto(getProto());
        conf.setExternalIp(getExternalIp());
        conf.setExternalPort(getExternalPort());
    }
    catch (std::exception& ex) {
        logger()->warn("NattingRule::toJsonObject exception: {}", ex.what());
    }

    return conf;
}

NattingRule::~NattingRule() {}

std::string NattingRule::getInternalSrc() {
    return srcIp_;
}

std::string NattingRule::getInternalDst() {
    return dstIp_;
}

uint16_t NattingRule::getInternalSport() {
    return srcPort_;
}

uint16_t NattingRule::getInternalDport() {
    return dstPort_;
}

std::string NattingRule::getProto() {
    return proto_;
}

std::string NattingRule::getExternalIp() {
    return newIp_;
}

void NattingRule::setExternalIp(const std::string &value) {
    logger()->warn("NattingRule::setExternalIp: Method not implemented");
}

uint16_t NattingRule::getExternalPort() {
    return newPort_;
}

void NattingRule::setExternalPort(const uint16_t &value) {
    logger()->warn("NattingRule::setExternalPort: Method not implemented");
}



