/**
* policer API generated from policer.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "PolicerBase.h"

PolicerBase::PolicerBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Policer] [%n] [%l] %v");
}



PolicerBase::~PolicerBase() {}

void PolicerBase::update(const PolicerJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.defaultContractIsSet()) {
    auto m = getDefaultContract();
    m->update(conf.getDefaultContract());
  }
  if (conf.contractIsSet()) {
    for (auto &i : conf.getContract()) {
      auto trafficClass = i.getTrafficClass();
      auto m = getContract(trafficClass);
      m->update(i);
    }
  }
}

PolicerJsonObject PolicerBase::toJsonObject() {
  PolicerJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  conf.setDefaultContract(getDefaultContract()->toJsonObject());
  for(auto &i : getContractList()) {
    conf.addContract(i->toJsonObject());
  }

  return conf;
}

void PolicerBase::replaceDefaultContract(const DefaultContractJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delDefaultContract();
  addDefaultContract(conf);
}
void PolicerBase::addContractList(const std::vector<ContractJsonObject> &conf) {
  for (auto &i : conf) {
    uint32_t trafficClass_ = i.getTrafficClass();
    addContract(trafficClass_, i);
  }
}

void PolicerBase::replaceContract(const uint32_t &trafficClass, const ContractJsonObject &conf) {
  delContract(trafficClass);
  uint32_t trafficClass_ = conf.getTrafficClass();
  addContract(trafficClass_, conf);
}

void PolicerBase::delContractList() {
  auto elements = getContractList();
  for (auto &i : elements) {
    uint32_t trafficClass_ = i->getTrafficClass();
    delContract(trafficClass_);
  }
}


