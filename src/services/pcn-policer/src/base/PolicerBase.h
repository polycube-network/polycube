/**
* policer API generated from policer.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PolicerBase.h
*
*
*/

#pragma once

#include "../serializer/PolicerJsonObject.h"

#include "../Contract.h"
#include "../DefaultContract.h"

#include "polycube/services/transparent_cube.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class PolicerBase: public virtual polycube::service::TransparentCube {
 public:
  PolicerBase(const std::string name);
  
  virtual ~PolicerBase();
  virtual void update(const PolicerJsonObject &conf);
  virtual PolicerJsonObject toJsonObject();

  /// <summary>
  /// Contract applied to traffic not matching any of the specified classes (default: PASS)
  /// </summary>
  virtual std::shared_ptr<DefaultContract> getDefaultContract() = 0;
  virtual void addDefaultContract(const DefaultContractJsonObject &value) = 0;
  virtual void replaceDefaultContract(const DefaultContractJsonObject &conf);
  virtual void delDefaultContract() = 0;

  /// <summary>
  /// Contract applied to a specific class of traffic
  /// </summary>
  virtual std::shared_ptr<Contract> getContract(const uint32_t &trafficClass) = 0;
  virtual std::vector<std::shared_ptr<Contract>> getContractList() = 0;
  virtual void addContract(const uint32_t &trafficClass, const ContractJsonObject &conf) = 0;
  virtual void addContractList(const std::vector<ContractJsonObject> &conf);
  virtual void replaceContract(const uint32_t &trafficClass, const ContractJsonObject &conf);
  virtual void delContract(const uint32_t &trafficClass) = 0;
  virtual void delContractList();
};
