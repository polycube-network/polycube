/**
* policer API generated from policer.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "PolicerJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

PolicerJsonObject::PolicerJsonObject() {
  m_nameIsSet = false;
  m_defaultContractIsSet = false;
  m_contractIsSet = false;
}

PolicerJsonObject::PolicerJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_defaultContractIsSet = false;
  m_contractIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("default-contract")) {
    if (!val["default-contract"].is_null()) {
      DefaultContractJsonObject newItem { val["default-contract"] };
      setDefaultContract(newItem);
    }
  }

  if (val.count("contract")) {
    for (auto& item : val["contract"]) {
      ContractJsonObject newItem{ item };
      m_contract.push_back(newItem);
    }

    m_contractIsSet = true;
  }
}

nlohmann::json PolicerJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_defaultContractIsSet) {
    val["default-contract"] = JsonObjectBase::toJson(m_defaultContract);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_contract) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["contract"] = jsonArray;
    }
  }

  return val;
}

std::string PolicerJsonObject::getName() const {
  return m_name;
}

void PolicerJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool PolicerJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



DefaultContractJsonObject PolicerJsonObject::getDefaultContract() const {
  return m_defaultContract;
}

void PolicerJsonObject::setDefaultContract(DefaultContractJsonObject value) {
  m_defaultContract = value;
  m_defaultContractIsSet = true;
}

bool PolicerJsonObject::defaultContractIsSet() const {
  return m_defaultContractIsSet;
}

void PolicerJsonObject::unsetDefaultContract() {
  m_defaultContractIsSet = false;
}

const std::vector<ContractJsonObject>& PolicerJsonObject::getContract() const{
  return m_contract;
}

void PolicerJsonObject::addContract(ContractJsonObject value) {
  m_contract.push_back(value);
  m_contractIsSet = true;
}


bool PolicerJsonObject::contractIsSet() const {
  return m_contractIsSet;
}

void PolicerJsonObject::unsetContract() {
  m_contractIsSet = false;
}


}
}
}

