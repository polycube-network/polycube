/**
* policer API generated from policer.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PolicerApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../Policer.h"

#include "ContractJsonObject.h"
#include "ContractUpdateDataInputJsonObject.h"
#include "DefaultContractJsonObject.h"
#include "DefaultContractUpdateDataInputJsonObject.h"
#include "PolicerJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace PolicerApiImpl {
  void create_policer_by_id(const std::string &name, const PolicerJsonObject &value);
  void create_policer_contract_by_id(const std::string &name, const uint32_t &trafficClass, const ContractJsonObject &value);
  void create_policer_contract_list_by_id(const std::string &name, const std::vector<ContractJsonObject> &value);
  void create_policer_contract_update_data_by_id(const std::string &name, const uint32_t &trafficClass, const ContractUpdateDataInputJsonObject &value);
  void create_policer_default_contract_by_id(const std::string &name, const DefaultContractJsonObject &value);
  void create_policer_default_contract_update_data_by_id(const std::string &name, const DefaultContractUpdateDataInputJsonObject &value);
  void delete_policer_by_id(const std::string &name);
  void delete_policer_contract_by_id(const std::string &name, const uint32_t &trafficClass);
  void delete_policer_contract_list_by_id(const std::string &name);
  void delete_policer_default_contract_by_id(const std::string &name);
  PolicerJsonObject read_policer_by_id(const std::string &name);
  ActionTypeEnum read_policer_contract_action_by_id(const std::string &name, const uint32_t &trafficClass);
  uint64_t read_policer_contract_burst_limit_by_id(const std::string &name, const uint32_t &trafficClass);
  ContractJsonObject read_policer_contract_by_id(const std::string &name, const uint32_t &trafficClass);
  std::vector<ContractJsonObject> read_policer_contract_list_by_id(const std::string &name);
  uint64_t read_policer_contract_rate_limit_by_id(const std::string &name, const uint32_t &trafficClass);
  ActionTypeEnum read_policer_default_contract_action_by_id(const std::string &name);
  uint64_t read_policer_default_contract_burst_limit_by_id(const std::string &name);
  DefaultContractJsonObject read_policer_default_contract_by_id(const std::string &name);
  uint64_t read_policer_default_contract_rate_limit_by_id(const std::string &name);
  std::vector<PolicerJsonObject> read_policer_list_by_id();
  void replace_policer_by_id(const std::string &name, const PolicerJsonObject &value);
  void replace_policer_contract_by_id(const std::string &name, const uint32_t &trafficClass, const ContractJsonObject &value);
  void replace_policer_contract_list_by_id(const std::string &name, const std::vector<ContractJsonObject> &value);
  void replace_policer_default_contract_by_id(const std::string &name, const DefaultContractJsonObject &value);
  void update_policer_by_id(const std::string &name, const PolicerJsonObject &value);
  void update_policer_contract_by_id(const std::string &name, const uint32_t &trafficClass, const ContractJsonObject &value);
  void update_policer_contract_list_by_id(const std::string &name, const std::vector<ContractJsonObject> &value);
  void update_policer_default_contract_by_id(const std::string &name, const DefaultContractJsonObject &value);
  void update_policer_list_by_id(const std::vector<PolicerJsonObject> &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_policer_contract_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_policer_list_by_id_get_list();

}
}
}
}

