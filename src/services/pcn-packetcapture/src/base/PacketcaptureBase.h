/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* PacketcaptureBase.h
*
*
*/

#pragma once

#include "../serializer/PacketcaptureJsonObject.h"

#include "../Globalheader.h"
#include "../Packet.h"

#include "polycube/services/transparent_cube.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class PacketcaptureBase: public virtual polycube::service::TransparentCube {
 public:
  PacketcaptureBase(const std::string name);
  
  virtual ~PacketcaptureBase();
  virtual void update(const PacketcaptureJsonObject &conf);
  virtual PacketcaptureJsonObject toJsonObject();

  /// <summary>
  /// Packet capture status
  /// </summary>
  virtual PacketcaptureCaptureEnum getCapture() = 0;
  virtual void setCapture(const PacketcaptureCaptureEnum &value) = 0;

  /// <summary>
  ///
  /// </summary>
  virtual bool getAnonimize() = 0;
  virtual void setAnonimize(const bool &value) = 0;

  /// <summary>
  /// dump capture
  /// </summary>
  virtual std::string getDump() = 0;
  virtual void setDump(const std::string &value) = 0;

  /// <summary>
  /// Operating mode
  /// </summary>
  virtual bool getNetworkmode() = 0;
  virtual void setNetworkmode(const bool &value) = 0;

  /// <summary>
  /// Snapshot length
  /// </summary>
  virtual uint32_t getSnaplen() = 0;
  virtual void setSnaplen(const uint32_t &value) = 0;

  /// <summary>
  /// filtering string (e.g., 'host 1.2.3.4 and src port 80')
  /// </summary>
  virtual std::string getFilter() = 0;
  virtual void setFilter(const std::string &value) = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<Globalheader> getGlobalheader() = 0;
  virtual void addGlobalheader(const GlobalheaderJsonObject &value) = 0;
  virtual void replaceGlobalheader(const GlobalheaderJsonObject &conf);
  virtual void delGlobalheader() = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<Packet> getPacket() = 0;
  virtual void addPacket(const PacketJsonObject &value) = 0;
  virtual void replacePacket(const PacketJsonObject &conf);
  virtual void delPacket() = 0;
};
