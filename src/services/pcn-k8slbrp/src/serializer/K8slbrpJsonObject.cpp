/**
* k8slbrp API generated from k8slbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "K8slbrpJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

K8slbrpJsonObject::K8slbrpJsonObject() {
    m_nameIsSet = false;
    m_portsIsSet = false;
    m_portMode = K8slbrpPortModeEnum::MULTI;
    m_portModeIsSet = true;
    m_srcIpRewriteIsSet = false;
    m_serviceIsSet = false;
}

K8slbrpJsonObject::K8slbrpJsonObject(const nlohmann::json &val) :
        JsonObjectBase(val) {
    m_nameIsSet = false;
    m_portsIsSet = false;
    m_portModeIsSet = false;
    m_srcIpRewriteIsSet = false;
    m_serviceIsSet = false;


    if (val.count("name")) {
        setName(val.at("name").get<std::string>());
    }

    if (val.count("ports")) {
        for (auto& item : val["ports"]) {
            PortsJsonObject newItem{ item };
            m_ports.push_back(newItem);
        }

        m_portsIsSet = true;
    }

    if (val.count("port_mode")) {
        setPortMode(string_to_K8slbrpPortModeEnum(val.at("port_mode").get<std::string>()));
    }

    if (val.count("src-ip-rewrite")) {
        if (!val["src-ip-rewrite"].is_null()) {
            SrcIpRewriteJsonObject newItem { val["src-ip-rewrite"] };
            setSrcIpRewrite(newItem);
        }
    }

    if (val.count("service")) {
        for (auto& item : val["service"]) {
            ServiceJsonObject newItem{ item };
            m_service.push_back(newItem);
        }

        m_serviceIsSet = true;
    }
}

nlohmann::json K8slbrpJsonObject::toJson() const {
    nlohmann::json val = nlohmann::json::object();
    if (!getBase().is_null()) {
        val.update(getBase());
    }

    if (m_nameIsSet) {
        val["name"] = m_name;
    }

    {
        nlohmann::json jsonArray;
        for (auto& item : m_ports) {
            jsonArray.push_back(JsonObjectBase::toJson(item));
        }

        if (jsonArray.size() > 0) {
            val["ports"] = jsonArray;
        }
    }

    if (m_portModeIsSet) {
        val["port_mode"] = K8slbrpPortModeEnum_to_string(m_portMode);
    }

    if (m_srcIpRewriteIsSet) {
        val["src-ip-rewrite"] = JsonObjectBase::toJson(m_srcIpRewrite);
    }

    {
        nlohmann::json jsonArray;
        for (auto& item : m_service) {
            jsonArray.push_back(JsonObjectBase::toJson(item));
        }

        if (jsonArray.size() > 0) {
            val["service"] = jsonArray;
        }
    }

    return val;
}

std::string K8slbrpJsonObject::getName() const {
    return m_name;
}

void K8slbrpJsonObject::setName(std::string value) {
    m_name = value;
    m_nameIsSet = true;
}

bool K8slbrpJsonObject::nameIsSet() const {
    return m_nameIsSet;
}



const std::vector<PortsJsonObject>& K8slbrpJsonObject::getPorts() const{
    return m_ports;
}

void K8slbrpJsonObject::addPorts(PortsJsonObject value) {
    m_ports.push_back(value);
    m_portsIsSet = true;
}


bool K8slbrpJsonObject::portsIsSet() const {
    return m_portsIsSet;
}

void K8slbrpJsonObject::unsetPorts() {
    m_portsIsSet = false;
}

K8slbrpPortModeEnum K8slbrpJsonObject::getPortMode() const {
    return m_portMode;
}

void K8slbrpJsonObject::setPortMode(K8slbrpPortModeEnum value) {
    m_portMode = value;
    m_portModeIsSet = true;
}

bool K8slbrpJsonObject::portModeIsSet() const {
    return m_portModeIsSet;
}

void K8slbrpJsonObject::unsetPortMode() {
    m_portModeIsSet = false;
}

std::string K8slbrpJsonObject::K8slbrpPortModeEnum_to_string(const K8slbrpPortModeEnum &value){
    switch(value) {
        case K8slbrpPortModeEnum::SINGLE:
            return std::string("single");
        case K8slbrpPortModeEnum::MULTI:
            return std::string("multi");
        default:
            throw std::runtime_error("Bad K8slbrp portMode");
    }
}

K8slbrpPortModeEnum K8slbrpJsonObject::string_to_K8slbrpPortModeEnum(const std::string &str){
    if (JsonObjectBase::iequals("single", str))
        return K8slbrpPortModeEnum::SINGLE;
    if (JsonObjectBase::iequals("multi", str))
        return K8slbrpPortModeEnum::MULTI;
    throw std::runtime_error("K8slbrp portMode is invalid");
}
SrcIpRewriteJsonObject K8slbrpJsonObject::getSrcIpRewrite() const {
    return m_srcIpRewrite;
}

void K8slbrpJsonObject::setSrcIpRewrite(SrcIpRewriteJsonObject value) {
    m_srcIpRewrite = value;
    m_srcIpRewriteIsSet = true;
}

bool K8slbrpJsonObject::srcIpRewriteIsSet() const {
    return m_srcIpRewriteIsSet;
}

void K8slbrpJsonObject::unsetSrcIpRewrite() {
    m_srcIpRewriteIsSet = false;
}

const std::vector<ServiceJsonObject>& K8slbrpJsonObject::getService() const{
    return m_service;
}

void K8slbrpJsonObject::addService(ServiceJsonObject value) {
    m_service.push_back(value);
    m_serviceIsSet = true;
}


bool K8slbrpJsonObject::serviceIsSet() const {
    return m_serviceIsSet;
}

void K8slbrpJsonObject::unsetService() {
    m_serviceIsSet = false;
}


}
}
}

