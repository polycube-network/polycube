/**
* k8slbrp API generated from k8slbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* K8slbrpJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ServiceJsonObject.h"
#include "SrcIpRewriteJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {

enum class K8slbrpPortModeEnum {
    SINGLE, MULTI
};

/// <summary>
///
/// </summary>
class  K8slbrpJsonObject : public JsonObjectBase {
public:
  K8slbrpJsonObject();
  K8slbrpJsonObject(const nlohmann::json &json);
  ~K8slbrpJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the k8slbrp service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  /// K8s lbrp mode of operation. 'MULTI' allows to manage multiple FRONTEND port. 'SINGLE' is optimized for working with a single FRONTEND port
  /// </summary>
  K8slbrpPortModeEnum getPortMode() const;
  void setPortMode(K8slbrpPortModeEnum value);
  bool portModeIsSet() const;
  void unsetPortMode();
  static std::string K8slbrpPortModeEnum_to_string(const K8slbrpPortModeEnum &value);
  static K8slbrpPortModeEnum string_to_K8slbrpPortModeEnum(const std::string &str);

  /// <summary>
  /// If configured, when a client request arrives to the LB, the source IP addrress is replaced with another IP address from the &#39;new&#39; range
  /// </summary>
  SrcIpRewriteJsonObject getSrcIpRewrite() const;
  void setSrcIpRewrite(SrcIpRewriteJsonObject value);
  bool srcIpRewriteIsSet() const;
  void unsetSrcIpRewrite();

  /// <summary>
  /// Services (i.e., virtual ip:protocol:port) exported to the client
  /// </summary>
  const std::vector<ServiceJsonObject>& getService() const;
  void addService(ServiceJsonObject value);
  bool serviceIsSet() const;
  void unsetService();

private:
    std::string m_name;
    bool m_nameIsSet;
    std::vector<PortsJsonObject> m_ports;
    bool m_portsIsSet;
    K8slbrpPortModeEnum m_portMode;
    bool m_portModeIsSet;
    SrcIpRewriteJsonObject m_srcIpRewrite;
    bool m_srcIpRewriteIsSet;
    std::vector<ServiceJsonObject> m_service;
    bool m_serviceIsSet;
};

}
}
}

