/**
* firewall API generated from firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* FirewallJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ChainJsonObject.h"
#include "SessionTableJsonObject.h"
#include <vector>
#include "polycube/services/transparent_cube.h"

namespace polycube {
namespace service {
namespace model {

enum class FirewallConntrackEnum {
  ON, OFF
};
enum class FirewallAcceptEstablishedEnum {
  ON, OFF
};

/// <summary>
///
/// </summary>
class  FirewallJsonObject : public JsonObjectBase {
public:
  FirewallJsonObject();
  FirewallJsonObject(const nlohmann::json &json);
  ~FirewallJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the firewall service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Enables the Connection Tracking module. Mandatory if connection tracking rules are needed. Default is ON.
  /// </summary>
  FirewallConntrackEnum getConntrack() const;
  void setConntrack(FirewallConntrackEnum value);
  bool conntrackIsSet() const;
  void unsetConntrack();
  static std::string FirewallConntrackEnum_to_string(const FirewallConntrackEnum &value);
  static FirewallConntrackEnum string_to_FirewallConntrackEnum(const std::string &str);

  /// <summary>
  /// If Connection Tracking is enabled, all packets belonging to ESTABLISHED connections will be forwarded automatically. Default is ON.
  /// </summary>
  FirewallAcceptEstablishedEnum getAcceptEstablished() const;
  void setAcceptEstablished(FirewallAcceptEstablishedEnum value);
  bool acceptEstablishedIsSet() const;
  void unsetAcceptEstablished();
  static std::string FirewallAcceptEstablishedEnum_to_string(const FirewallAcceptEstablishedEnum &value);
  static FirewallAcceptEstablishedEnum string_to_FirewallAcceptEstablishedEnum(const std::string &str);

  /// <summary>
  ///
  /// </summary>
  const std::vector<SessionTableJsonObject>& getSessionTable() const;
  void addSessionTable(SessionTableJsonObject value);
  bool sessionTableIsSet() const;
  void unsetSessionTable();

  /// <summary>
  ///
  /// </summary>
  const std::vector<ChainJsonObject>& getChain() const;
  void addChain(ChainJsonObject value);
  bool chainIsSet() const;
  void unsetChain();

private:
  std::string m_name;
  bool m_nameIsSet;
  FirewallConntrackEnum m_conntrack;
  bool m_conntrackIsSet;
  FirewallAcceptEstablishedEnum m_acceptEstablished;
  bool m_acceptEstablishedIsSet;
  std::vector<SessionTableJsonObject> m_sessionTable;
  bool m_sessionTableIsSet;
  std::vector<ChainJsonObject> m_chain;
  bool m_chainIsSet;
};

}
}
}

